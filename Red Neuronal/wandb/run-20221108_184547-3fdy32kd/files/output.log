[34m[1mwandb[39m[22m: [33mWARNING[39m The save_model argument by default saves the model in the HDF5 format that cannot save custom objects like subclassed models and custom layers. This behavior will be deprecated in a future release in favor of the SavedModel format. Meanwhile, the HDF5 model is saved as W&B files and the SavedModel as W&B Artifacts.
Traceback (most recent call last):
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\Proyecto-2_RNA\Red Neuronal\Red neuronal para reconocimiento facial - mod.py", line 109, in <module>
    history= model.fit(data_set_tr,
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\utils\traceback_utils.py", line 70, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "C:\Users\wwwle\AppData\Local\Temp\__autograph_generated_fileoayh8vhk.py", line 15, in tf__train_function
    retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope)
ValueError: in user code:
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1160, in train_function  *
        return step_function(self, iterator)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1146, in step_function  **
        outputs = model.distribute_strategy.run(run_step, args=(data,))
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1135, in run_step  **
        outputs = model.train_step(data)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 994, in train_step
        loss = self.compute_loss(x, y, y_pred, sample_weight)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1052, in compute_loss
        return self.compiled_loss(
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\compile_utils.py", line 265, in __call__
        loss_value = loss_obj(y_t, y_p, sample_weight=sw)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\losses.py", line 152, in __call__
        losses = call_fn(y_true, y_pred)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\losses.py", line 272, in call  **
        return ag_fn(y_true, y_pred, **self._fn_kwargs)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\losses.py", line 2162, in binary_crossentropy
        backend.binary_crossentropy(y_true, y_pred, from_logits=from_logits),
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\backend.py", line 5677, in binary_crossentropy
        return tf.nn.sigmoid_cross_entropy_with_logits(
    ValueError: `logits` and `labels` must have the same shape, received ((None, 1) vs (None, 40)).
Epoch 1/10