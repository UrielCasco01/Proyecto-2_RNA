[34m[1mwandb[39m[22m: [33mWARNING[39m The save_model argument by default saves the model in the HDF5 format that cannot save custom objects like subclassed models and custom layers. This behavior will be deprecated in a future release in favor of the SavedModel format. Meanwhile, the HDF5 model is saved as W&B files and the SavedModel as W&B Artifacts.
Traceback (most recent call last):
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\Proyecto-2_RNA\Red Neuronal\Red neuronal para reconocimiento facial.py", line 89, in <module>
    model.fit(imagen_etiquetada,
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\wandb\integration\keras\keras.py", line 174, in new_v2
    return old_v2(*args, **kwargs)
  File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\utils\traceback_utils.py", line 70, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "C:\Users\wwwle\AppData\Local\Temp\__autograph_generated_filebj4ln_yf.py", line 15, in tf__train_function
    retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope)
ValueError: in user code:
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1160, in train_function  *
        return step_function(self, iterator)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1146, in step_function  **
        outputs = model.distribute_strategy.run(run_step, args=(data,))
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 1135, in run_step  **
        outputs = model.train_step(data)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\training.py", line 993, in train_step
        y_pred = self(x, training=True)
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\utils\traceback_utils.py", line 70, in error_handler
        raise e.with_traceback(filtered_tb) from None
    File "C:\Users\wwwle\Documents\Materias_Universidad\Redes Neuronales\env\Keras[3.9]\lib\site-packages\keras\engine\input_spec.py", line 295, in assert_input_compatibility
        raise ValueError(
    ValueError: Input 0 of layer "sequential" is incompatible with the layer: expected shape=(None, 180, 180, 3), found shape=(180, 180, 3)
Epoch 1/30